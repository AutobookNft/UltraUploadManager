<?php

/**
 * üìú Oracode Enum: CategoryEnum
 *
 * @package         Ultra\UltraConfigManager\Enums
 * @version         1.1.0 // Versione incrementata per refactoring Oracode
 * @author          Fabio Cherici
 * @copyright       2024 Fabio Cherici
 * @license         MIT
 */

namespace Ultra\UltraConfigManager\Enums;

use Illuminate\Contracts\Translation\Translator; // Per potenziale DI

/**
 * üéØ Purpose: Defines a standardized, type-safe set of categories for classifying
 *    configuration entries within the UltraConfigManager system. Provides methods
 *    for retrieving translation keys and translated names, facilitating UI integration.
 *
 * üß± Structure: PHP 8.1 Backed Enum (`string`). Defines cases for standard categories
 *    (`System`, `Application`, `Security`, `Performance`) and a special case `None`
 *    to represent the absence of a category. Includes methods `translationKey()`,
 *    `translatedName()`, and `translatedOptions()` relying on Laravel's translation system.
 *
 * üß© Context: Used in `UltraConfigModel`'s `$casts` property. Referenced in UI views
 *    (e.g., forms, tables) via helper methods for display. Used by `UltraConfigManager`
 *    and `EloquentConfigDao` when handling the category attribute.
 *
 * üõ†Ô∏è Usage:
 *    `CategoryEnum::System`
 *    `$model->category = CategoryEnum::Application;`
 *    `$enumInstance->translatedName()` (e.g., in a Blade view)
 *    `CategoryEnum::translatedOptions()` (e.g., for populating a `<select>` dropdown)
 *    `CategoryEnum::tryFrom('system')` (for parsing input)
 *
 * üíæ State: Represents distinct, predefined category states. Enum itself is stateless.
 *
 * üóùÔ∏è Key Features:
 *    - Type Safety: Ensures only valid categories can be assigned.
 *    - Backed Enum: Each case has a corresponding string value ('system', 'application', etc.).
 *    - Translation Support: Methods integrate with Laravel's translation system (`__()` helper)
 *      using keys defined in `uconfig::uconfig.categories.*`.
 *    - `None` Case: Represents the explicit absence of a category (maps to empty string '').
 *
 * üö¶ Signals: Methods rely on the availability of Laravel's translation service and the
 *    corresponding translation keys being defined in language files.
 *
 * üõ°Ô∏è Privacy (GDPR): Category names themselves are not PII.
 *    - `@privacy-safe`: Enum values and associated translations are considered non-sensitive metadata.
 *
 * ü§ù Dependencies:
 *    - Relies on PHP 8.1+ Enum feature.
 *    - Methods `translatedName()` and `translatedOptions()` depend on Laravel's translation
 *      service (typically accessed via the global `__()` helper). This is an acceptable coupling
 *      for UI-related functionality within a Laravel package.
 *
 * üß™ Testing:
 *    - Test that `::cases()` returns all expected enum instances.
 *    - Test that `$case->value` returns the correct string backing.
 *    - Test `::tryFrom()` for valid and invalid string inputs.
 *    - Test `translationKey()` returns the expected string format.
 *    - Testing `translatedName()` and `translatedOptions()` requires a Laravel testing environment
 *      where the translation service and language files are loaded (e.g., using Orchestra Testbench
 *      or within a full Laravel application test suite). Mocking the `__()` helper is also possible but complex.
 *
 * üí° Logic: Standard implementation of a backed enum with helper methods for common use cases,
 *    leveraging the framework's translation capabilities.
 *
 * @package Ultra\UltraConfigManager\Enums
 */
enum CategoryEnum: string
{
    case System = 'system';
    case Application = 'application';
    case Security = 'security';
    case Performance = 'performance';
    /** Represents the absence of an explicit category. */
    case None = '';

    /**
     * üè∑Ô∏è Generates the translation key string for this category case.
     * Uses the 'uconfig::uconfig.categories.' namespace prefix.
     *
     * @return string The translation key (e.g., "uconfig::uconfig.categories.system").
     */
    public function translationKey(): string
    {
        // Handle the 'None' case specifically if it has its own translation key
        if ($this === self::None) {
             return 'uconfig::uconfig.categories.none'; // Assuming 'none' key exists
        }
        return 'uconfig::uconfig.categories.' . $this->value;
    }

    /**
     * üåê Retrieves the translated display name for this category case.
     * Relies on Laravel's translation system (`__()` helper).
     *
     * @return string The translated category name.
     * @dependency Relies on Laravel translation helper `__()` and language files.
     */
    public function translatedName(): string
    {
        // Use the specific key generated by translationKey()
        // The __() helper will handle fallback languages if configured in Laravel.
        return __($this->translationKey());
    }

    /**
     * üåê Provides an associative array of all defined category values (excluding 'None')
     * mapped to their translated names. Suitable for populating UI elements like dropdowns.
     *
     * @return array<string, string> ['system' => 'System', 'application' => 'Application', ...]
     * @dependency Relies on Laravel translation helper `__()` and language files.
     * @static
     */
    public static function translatedOptions(): array
    {
        $options = [];
        foreach (self::cases() as $case) {
            // Exclude the 'None' case from selectable options
            if ($case !== self::None) {
                $options[$case->value] = $case->translatedName(); // Uses translatedName() which uses __()
            }
        }
        return $options;
    }

     /**
     * ‚úÖ Provides an array of all valid string values for this enum (excluding 'None').
     * Useful for validation rules (e.g., `Rule::in(CategoryEnum::validValues())`).
     *
     * @return array<int, string> ['system', 'application', 'security', 'performance']
     * @static
     */
    public static function validValues(): array
    {
        $values = [];
        foreach (self::cases() as $case) {
             if ($case !== self::None) {
                 $values[] = $case->value;
             }
        }
        return $values;
    }
}