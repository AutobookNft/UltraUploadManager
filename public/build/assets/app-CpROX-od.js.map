{"version":3,"file":"app-CpROX-od.js","sources":["../../../packages/ultra/uploadmanager/resources/js/sendErrorEmail.js","../../../packages/ultra/uploadmanager/resources/js/notification.js","../../../packages/ultra/uploadmanager/resources/js/errorMessage.js"],"sourcesContent":["if (import.meta.env.MODE === 'development') {\n    console.log('Dentro sendErrorEmail');\n}\n\nfunction sendErrorEmail(params) {\n\n    fetch('/send-error-email', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n        },\n        body: JSON.stringify(params)\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.status === 'success') {\n            console.log(data.message);\n        } else {\n            console.error(data.message);\n        }\n    })\n    .catch(error => {\n        console.error('Errore durante la richiesta:', error);\n    });\n}\n\nwindow.sendErrorEmail = sendErrorEmail;\n\n","if (import.meta.env.MODE === 'development') {\n    console.log('dentro notification.js');\n}\n\nif (typeof Livewire !== 'undefined') {\n\nLivewire.on('success', (text) => {\n    console.log(text);\n    Swal.fire({\n        title: text[0]['message'],\n        html: text[0]['element'],\n        width: 600,\n        padding: \"3em\",\n        color: \"#00FF00\",\n        background: \"#fff url(/images/trees.png)\",\n        });\n});\n\nLivewire.on('forbiddenTermFound', (text) => {\n    console.log(text);\n    Swal.fire({\n        title: text[0]['title'],\n        html: text[0]['message'],\n        width: 600,\n        padding: \"3em\",\n        color: \"#716add\",\n        background: \"#fff url(/images/trees.png)\",\n        footer: text[0]['link'],\n        backdrop: `\n            rgba(0,0,123,0.4)\n            url(\"/images/nyan-cat.gif\")\n            left top\n            no-repeat\n        `\n        });\n});\n\nLivewire.on('generic_error', (text) => {\n    console.log(text);\n    Swal.fire({\n        icon: \"error\",\n        title: \"Oops...\",\n        text: text[0]['message'],\n    });\n});\n\nLivewire.on('sureMergeTraitToEGI', (text) => {\n    console.log(text);\n    Swal.fire({\n        title: text[0]['title'],\n        text: text[0]['message'],\n        icon: 'question',\n        showCancelButton: true,\n        confirmButtonColor: \"#3085d6\",\n        cancelButtonColor: \"#d33\",\n        confirmButtonText: text[0]['confirmButtonText'],\n        cancelButtonText: text[0]['cancelButtonText']\n    }).then((result) => {\n        if (result.isConfirmed) {\n            // Invia un evento Livewire per chiamare il metodo mergeTraitToEGI\n            Livewire.dispatch('mergeTraitToEGI');\n\n            // Mostra un messaggio di successo\n            Swal.fire({\n                title: text[0]['result_title'],\n                text: text[0]['result_message'],\n                icon: 'success',\n            });\n        }\n    });\n});\n}else{\n    console.log('Livewire non definito');\n}\n","\n\n// @ts-ignore\nif (import.meta.env.MODE === 'development') {\n    console.log('Dentro errorMessage');\n}\n\n/*\n* Questa fetch viene eseguita una volta al caricamento dell'app per recuperare tutti i codici di errore necessari\n* e salvarli globalmente nella variabile window.errorCodes. La fetch è esterna alla funzione errorMessage\n* perché è più efficiente eseguire una singola richiesta al server piuttosto che richiedere i dati ogni volta\n* che viene chiamata la funzione errorMessage.\n*/\nfetch('/error_codes')\n    .then(response => response.json())\n    .then(data => {\n        window.errorCodes = data;\n        // if (import.meta.env.MODE === 'development') {\n        //    console.log('Error codes loaded:', window.errorCodes);\n        // }\n    })\n    .catch(error => console.error('Error loading error codes:', error));\n\n\n/*\n * Questa fetch viene eseguita una volta al caricamento dell'app per recuperare tutte le traduzioni necessarie\n * e salvarle globalmente nella variabile window.translations. La fetch è esterna alla funzione errorMessage\n * perché è più efficiente eseguire una singola richiesta al server piuttosto che richiedere i dati ogni volta\n * che viene chiamata la funzione errorMessage.\n *\n * La funzione errorMessage viene definita solo dopo che la fetch ha completato il caricamento delle traduzioni.\n * In questo modo, ogni volta che si chiama errorMessage, si hanno già le traduzioni caricate in memoria,\n * evitando così richieste aggiuntive e migliorando le prestazioni dell'app.\n *\n * Questo approccio consente di avere i dati pronti globalmente e garantisce che la funzione errorMessage\n * possa accedere immediatamente alle traduzioni senza ritardi causati da ulteriori fetch.\n */\nfetch('/translations')\n    .then(response => response.json())\n    .then(data => {\n        window.translations = data;\n\n        // if (import.meta.env.MODE === 'development') {\n        //     console.log('window.translations', window.translations.label);\n        // }\n\n        // Definisci la funzione errorMessage solo dopo che le traduzioni sono state caricate\n        window.errorMessage = function(codeError, params = {}) {\n            // const SEND_MAIL = window.sendEmail;\n            let userMessage = '';\n            let devMessage = '';\n            // @ts-ignore\n            if (import.meta.env.MODE === 'development') {\n                console.log('File: errorMessage. ACTION: codeError', codeError);\n            }\n\n            switch (codeError) {\n                case 400:\n                    userMessage =  'Richiesta non valida';\n                    devMessage = 'Richiesta non valida';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('File: errorMessage. Action: codeError: 400', codeError);\n                    }\n\n                    return { userMessage, devMessage };\n                case 401:\n                    userMessage =  'Non autorizzato';\n                    devMessage = 'Non autorizzato';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('File: errorMessage. Action: codeError 401', codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case 403:\n                    userMessage =  'Vietato';\n                    devMessage = 'Vietato';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('File: errorMessage. Action: codeError 403', codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case 404:\n                    userMessage =  'Non trovato';\n                    devMessage = 'Non trovato';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('File: errorMessage. Action: codeError 404', codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case 405:\n                    userMessage =  'Metodo non consentito';\n                    devMessage = 'Metodo non consentito';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('File: errorMessage. Action: codeError 405', codeError);\n                    }\n\n                    return { userMessage, devMessage };\n                case 500:\n                    userMessage =  'Errore interno del server';\n                    devMessage = 'Errore interno del server';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('File: errorMessage. Action: codeError 500'), codeError;\n                    }\n\n                    return { userMessage, devMessage };\n                case 502:\n                    userMessage = 'Gateway non valido';\n                    devMessage = 'Gateway non valido';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('File: errorMessage. Action: codeError 502', codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case 503:\n\n                    userMessage = 'Servizio non disponibile';\n                    devMessage = 'Servizio non disponibile';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('File: errorMessage. Action: codeError 503', codeError);\n                    }\n\n                    return { userMessage, devMessage };\n                case 504:\n\n                    userMessage = 'Gateway Timeout';\n                    devMessage = 'Gateway Timeout';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('File: errorMessage. Action: codeError 504', codeError);\n                    }\n\n                    return { userMessage, devMessage };\n                case window.errorCodes['MAX_FILE_SIZE']:\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('window.maxSize:', window.maxSize);\n                        console.log('window.maxSizeMessage:', window.maxSizeMessage);\n                    }\n\n                    window.maxSize = window.maxSize / 1024; // Converte in MB\n                    userMessage = replacePlaceholder(window.maxSizeMessage, 'size', window.maxSize);\n                    devMessage = 'File troppo grande';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('File: errorMessage. Action: codeError upload_fallito', codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case window.errorCodes['INVALID_FILE_EXTENSION']:\n\n                    userMessage = window.translations.errors['file_extension_not_valid'];\n                    devMessage = 'Estensione file non valida';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log(\"File: errorMessage. Action: \" + devMessage, codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case window.errorCodes['MIME_TYPE_NOT_ALLOWED']:\n\n                    userMessage = window.translations.errors['mime_type_not_allowed'];\n                    devMessage = 'Il tipo MIME del file non è valido';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log(\"File: errorMessage. Action: \" + devMessage, codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case window.errorCodes['INVALID_FILE_NAME']:\n\n                    userMessage = window.translations.errors['invalid_file_name'];\n                    devMessage = 'Nome del file non valido';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log(\"File: errorMessage. Action: \" + devMessage, codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case window.errorCodes['ERROR_GETTING_PRESIGNED_URL']:\n\n                    userMessage = window.translations.errors['error_getting_presigned_URL_for_user'];\n                    devMessage = `Errore durante il recupero dell\\'URL prefirmato`;\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log(\"File: errorMessage. Action: \" + devMessage, codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case window.errorCodes['INVALID_IMAGE_STRUCTURE']:\n\n                    userMessage = window.translations.errors['invalid_image_structure'];\n                    devMessage = 'Struttura del file immagine corrotta';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log(\"File: errorMessage. Action: \" + devMessage, codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case window.errorCodes['INVALID_FILE_PDF']:\n\n                    userMessage = window.translations.errors['invalid_pdf_file'];\n                    devMessage = 'File PDF non valido';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log(\"File: errorMessage. Action: \" + devMessage, codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case window.errorCodes['ERROR_DELETING_LOCAL_TEMP_FILE']:\n                    // Questo errore si verifica quando si tenta di eliminare un file temporaneo locale, ma il file non esiste.\n\n                    // Per questo errore occorre inviare una mail al devTeam.\n                    // L'errore si è prodotto nel metodo deleteTempFile() del file UploadController.php\n                    devMessage = `Errore durante l\\'eliminazione del file temporaneo locale`;\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log(\"File: errorMessage.js Action:\", devMessage, codeError);\n                    }\n\n                    return devMessage;\n\n                case window.errorCodes['ERROR_DELETING_EXT_TEMP_FILE']:\n                    // Questo errore si verifica quando si tenta di eliminare un file temporaneo su un hosting esterno, ma il file non esiste.\n\n                    // Per questo errore occorre inviare una mail al devTeam.\n                    // L'errore si è prodotto nel metodo deleteTempFile() del file UploadController.php\n\n                    devMessage = `Errore durante l\\'eliminazione del file temporaneo su ${window.defaultHostingService}`;\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log(\"File: errorMessage.js Action:\", devMessage, codeError);\n                    }\n\n                    return { devMessage };\n\n                case window.errorCodes['SCAN_ERROR']:\n\n                    userMessage =  window.translations.label['scan_error'];\n                    // Invio una mail al devteam per informarli che c'è stato un errore durante la scansione di un file\n                    devMessage = `Errore durante la scansione di un file`;\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('File: errorMessage. Action: codeError scan_failed', codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case window.errorCodes['VIRUS_FOUND']:\n\n                    userMessage =  window.translations.errors['virus_found'];\n                    devMessage = `File infetto`;\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('File: errorMessage. Action: codeError virus_found', codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case window.errorCodes['ERROR_DURING_FILE_UPLOAD']:\n\n                    userMessage =  window.translations.errors['error_during_file_upload'];\n                    devMessage = 'Errore durante l\\'upload';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('File: errorMessage. Action: codeError error_during_file_upload', codeError);\n                    }\n\n                    return { userMessage, devMessage };\n                case window.errorCodes['UNABLE_TO_SAVE_BOT_FILE']:\n\n                    // Per lo user invio nu messaggio generico\n                    userMessage =  window.translations.errors['error_during_file_upload'];\n                    devMessage = 'Non è stato possibile salvare entrambe i file nel metodo: saveFileToSpaces(), Class: UploadingFiles';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log( devMessage, codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case window.errorCodes['UNABLE_TO_CREATE_DIRECTORY']:\n\n                    /*\n                    * Spiegazionbe: se non è possibile creare la cartella, il file locale non viene creato, viene comunque salvato sul disco esterno.\n                    * Tipo di errore: Critico\n                    * Comunicazione user: nessuna comunicazione.\n                    * Comunicazione devTeam: Non è stato possibile creare la cartella durante il salvataggio del file su localhost. Metodo: ensureDirectoryPermissions(), Trait: HasUtility.\n                    */\n                    userMessage =  'nn';\n                    devMessage = 'Non è stato possibile creare la cartella durante il salvataggio del file su localhost. Metodo: ensureDirectoryPermissions(), Trait: HasUtility';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log(devMessage, codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case window.errorCodes['UNABLE_TO_CHANGE_PERMISSIONS']:\n\n                    /*\n                    * Spiegazione: se non è possibile riassegnare i permessi, il file locale non viene creato, viene comunque salvato sul disco esterno.\n                    * Tipo di errore: Critico\n                    * Comunicazione user: nessuna comunicazione.\n                    * Comunicazione devTeam: Non è stato possibile assegnare i permessi alla cartella durante il salvataggtio del file su localhost. Metodo: ensureDirectoryPermissions(), Trait: HasUtility'.\n                    */\n                    userMessage =  'nn';\n                    devMessage = 'Non è stato possibile assegnare i permessi alla cartella durante il salvataggtio del file su localhost. Metodo: ensureDirectoryPermissions(), Trait: HasUtility';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log(devMessage, codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case window.errorCodes['ERROR_DURING_CREATE_EGI_RECORD']:\n\n\n                    // Per lo user invio un messaggio generico\n                    // Per qualche ragione le informazioni non sono state salòvate sul record\n                    // Occorre avvisare il devTeam\n                    userMessage =  window.translations.errors['error_during_file_upload'];;\n                    devMessage = 'Non è stato possibile salvare i dati dell\\'EGI. Metodo: createEGIRecord(), Class: UploadingFiles';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log(devMessage, codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                    case window.errorCodes['ERROR_DURING_FILE_NAME_ENCRYPTION']:\n\n                    // Per lo user invio un messaggio generico\n                    // C'è stato un errore nella fase di criptazione del nome del file, occorre verioficare tempestivamente la causa,\n                    // Per questo il devTeam deve essere avvisato, infatti questo è un errore critico\n                    userMessage =  window.translations.errors['error_during_file_upload'];;\n                    devMessage = 'Non è stato possibile salvare i dati dell\\'EGI. Metodo: createEGIRecord(), Class: UploadingFiles';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log(devMessage, codeError);\n                    }\n\n                    return { userMessage, devMessage };\n                case 'upload_file_non_valido':\n                    userMessage =  window.translations.label['scan_error'];\n                    devMessage = 'Impossibile trovare il file da scansionare';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('File: errorMessage. Action: codeError upload_file_non_valido', codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case 'upload_file_troppo_grande':\n                    userMessage =  window.translations.label['scan_error'];\n                    devMessage = 'Impossibile trovare il file da scansionare';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('File: errorMessage. Action: codeError upload_file_troppo_grande', codeError);\n                    }\n\n                    return { userMessage, devMessage };\n\n                case 'upload_file_non_caricato':\n                    userMessage =  window.translations.label['scan_error'];\n                    devMessage = 'Impossibile trovare il file da scansionare';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('File: errorMessage. Action: codeError upload_file_non_caricato', codeError);\n                    }\n                    return { userMessage, devMessage };\n\n                default:\n                    userMessage =  '';\n                    devMessage = 'Errore sconosciuto';\n                    // @ts-ignore\n                    if (import.meta.env.MODE === 'development') {\n                        console.log('File: errorMessage. Action: codeError default', codeError);\n                    }\n\n                    return { userMessage, devMessage };\n            }\n        };\n    })\n    .catch(error => console.error('Error loading translations:', error));\n\n    /**\n     *\n     * @param {string} text\n     * @param {*} placeholder\n     * @param {*} value\n     * @returns\n     */\n    function replacePlaceholder(text, placeholder, value) {\n        return text.replace(new RegExp(`:${placeholder}`, 'g'), value);\n    }\n"],"names":["sendErrorEmail","params","response","data","error","text","result","codeError","userMessage","devMessage","replacePlaceholder","placeholder","value"],"mappings":"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"}